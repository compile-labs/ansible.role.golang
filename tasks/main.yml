---
  - name: Register the current Go version (if any)
    command: "{{ go_dest_dir }}/go/bin/go version"
    ignore_errors: yes
    become: yes
    register: go_version

  - name: Download the Go tarball if not installed or version changed
    get_url: url={{ go_download_location }} dest=/tmp/{{ go_tarball }} sha256sum={{ go_tarball_checksum }} validate_certs=no
    become: yes
    when: go_version|failed or go_version.stdout != go_version_target

  - name: Extract the Go tarball if Go is not yet installed or if it is not the desired version
    become: yes
    command: "tar -C {{ go_dest_dir }} -xf /tmp/{{ go_tarball }}"
    when: go_version|failed or go_version.stdout != go_version_target

  # ENV for user
  - name: Set Go ENV paths
    lineinfile: "line=\"{{ item }}\" dest=~/.profile create=yes"
    become: yes
    with_items:
        - "export GOBIN={{ app__project_version_root }}/bin"
        - "export GOPATH={{ app__project_version_root }}"
        - "export PATH={{ go_dest_dir }}/go/bin:$PATH:{{ app__project_version_root }}/bin"

  # ENV for root
  - name: Set Go ENV paths for root
    lineinfile: "line=\"{{ item }}\" dest=~/.profile create=yes"
    become: yes
    with_items:
        - "export GOBIN={{ app__project_version_root }}/bin"
        - "export GOPATH={{ app__project_version_root }}"
        - "export PATH={{ go_dest_dir }}/go/bin:$PATH:{{ app__project_version_root }}/bin"

  - name: Use .profile ENV params in BASH for root
    lineinfile: "line=\"if [ -f ~/.profile ]; then source ~/.profile; fi # Ansible managed\" dest=~/.bash_profile create=yes"
    become: yes

  - name: Use .profile ENV params in BASH for user
    become: yes
    lineinfile: "line=\"if [ -f ~/.profile ]; then source ~/.profile; fi # Ansible managed\" dest=~/.bash_profile create=yes"